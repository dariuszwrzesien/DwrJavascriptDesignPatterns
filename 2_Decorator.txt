Prosty dekorator:
----------------------------------------------

var Task = function (name) {
	this.name = name;
	this.completed = false;
}

Task.prototype.complete = function () {
	this.completed = true;
}

Task.prototype.save = function () {
	console.log('saving ' + this.name);
}

var myTask = new Task('Legacy Task');
myTask.complete();
myTask.save();

//Chcemy dodać (udekorować) Task możliwością nadania priorytetu oraz notyfikacji, ale nie chemy zmieniać niczego w obecnie działającym obiekcie myTask

var urgentTask = new Task('Urgent Task');

//Dodajemy właściwość oraz metodę tylko dla urgentTask
urgentTask.prority = 1;
urgentTask.notify = function() {
	console.log('This is important !!!');
}

urgentTask.complete()

//Nadpisujemy metodę save, a w jej body wykonujemy notify() oraz orginalnie zdefiniowaną metodę save z Task.prototype.save - czyli w naszym przypadku wypisanie do konsoli console.log('saving ' + this.name);

urgentTask.save = function() {
	this.notify();
	Task.prototype.save.call(this); //wywołujemy metodę save z Task.prototype
}

urgentTask.save();


Wersja rozszerzona
----------------------------------------------

var Task = function (name) {
	this.name = name;
	this.completed = false;
}

Task.prototype.complete = function () {
	this.completed = true;
}

Task.prototype.save = function () {
	console.log('saving ' + this.name);
}

var myTask = new Task('Legacy Task');
myTask.complete();
myTask.save();

//Tworzymy subclasę classy Task:

var UrgentTask = function(name, priority) {
	Task.call(this, name); // wykonujemy konstruktor z var Task
	this.priority = priority; //Dodajemy nową właściwość priority
}

var ut = new UrgentTask('This is urgent', 1);
console.log(ut); //{name: 'This is urgent', completed: false, priority: 1}


//Ponieważ chcemy mieć również możliwości użycia metod zdefiniowanych w Task.prototype, to aby tego dokonać należy:

UrgentTask.prototype = Object.create(Task.prototype); / Wazne jest aby użyć Object.create() zamiast prostego przypisania ponieważ wykonując proste przypisanie czyli UrgentTask.prototype = Task.prototype; i modyfikując classe tak jak  poniżej - modyfikowalibyśmy też classe bazową - a tego ruszac nie chcemy

UrgentTask.prototype.notify = function () {
	console.log('This is important !!!');
}

UrgentTask.prototype.save = function() {
	this.notify();
	console.log('sth special here');
	Task.prototype.save.call(this); //wywołujemy metodę save z Task.prototype
}







